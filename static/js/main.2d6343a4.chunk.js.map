{"version":3,"sources":["WeatherCards.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherCards","props","iconUrl","card","weather","icon","CardGroup","className","Card","Header","bg","variant","Date","dt","toDateString","Body","src","description","Table","temp","max","min","wind_speed","App","useState","cardsData","cCardsData","date","temp_min","temp_max","cWeather","useEffect","axios","get","then","res","data","daily","Navbar","Brand","size","map","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAwCeA,MAnCf,SAAsBC,GACpB,IAAMC,EAAU,oCAAsCD,EAAME,KAAKC,QAAQ,GAAGC,KAAM,UAClF,OACE,cAACC,EAAA,EAAD,CAAWC,UAAU,cAArB,SACE,eAACC,EAAA,EAAD,WACE,cAACA,EAAA,EAAKC,OAAN,CAAaC,GAAG,YAAYC,QAAQ,OAApC,SACE,6BAAK,IAAIC,KAAqB,IAAhBX,EAAME,KAAKU,IAAWC,mBAEtC,eAACN,EAAA,EAAKO,KAAN,WACE,qBAAKC,IAAKd,IACV,oBAAIK,UAAU,8BAAd,SACE,oBAAIA,UAAU,kBAAd,SAAiCN,EAAME,KAAKC,QAAQ,GAAGa,gBAEzD,eAACC,EAAA,EAAD,WACE,gCACE,+BACE,sCACA,qCACA,iDAGJ,gCACE,+BACE,6BAAKjB,EAAME,KAAKgB,KAAKC,MACrB,6BAAKnB,EAAME,KAAKgB,KAAKE,MACrB,6BAAKpB,EAAME,KAAKmB,8B,yBCwBjBC,MA9Cf,WACE,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA4BF,mBAAS,CACnCG,KAAM,GACNV,YAAa,GACbW,SAAU,GACVC,SAAU,GACVP,WAAY,KALd,mBAAgBQ,GAAhB,WA6BA,OAXAC,qBAAU,WACRD,EAAS,CACPH,KAAM,WACNV,YAAa,wCACbW,SAAU,KACVC,SAAU,KACVP,WAAY,OAfdU,IACGC,IACC,8HAEDC,MAAK,SAACC,GACLT,EAAWS,EAAIC,KAAKC,YAavB,IAGD,qCACE,cAACC,EAAA,EAAD,CAAQ5B,GAAG,UAAUC,QAAQ,OAA7B,SACE,eAAC2B,EAAA,EAAOC,MAAR,sBACU,cAAC,IAAD,CAAqBC,KAAM,UAGtCf,EAAUgB,KAAI,SAACC,GACd,OAAO,cAAC,EAAD,CAAcvC,KAAMuC,WCnCpBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2d6343a4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport CardGroup from \"react-bootstrap/CardGroup\";\r\n\r\nfunction WeatherCards(props) {\r\n  const iconUrl = \"http://openweathermap.org/img/wn/\" + props.card.weather[0].icon +\"@2x.png\"\r\n  return (\r\n    <CardGroup className=\"text-center\">\r\n      <Card>\r\n        <Card.Header bg=\"secondary\" variant=\"dark\">\r\n          <h1>{new Date(props.card.dt * 1000).toDateString()}</h1>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <img src={iconUrl}/>\r\n          <ul className=\"list-group list-group-flush\">\r\n            <li className=\"list-group-item\">{props.card.weather[0].description}</li>\r\n          </ul>\r\n          <Table>\r\n            <thead>\r\n              <tr>\r\n                <th>High</th>\r\n                <th>Low</th>\r\n                <th>Wind Speed</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>{props.card.temp.max}</td>\r\n                <td>{props.card.temp.min}</td>\r\n                <td>{props.card.wind_speed}</td>\r\n              </tr>\r\n            </tbody>\r\n          </Table>\r\n        </Card.Body>\r\n      </Card>\r\n    </CardGroup>\r\n  );\r\n}\r\n\r\nexport default WeatherCards;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport WeatherCards from \"./WeatherCards\";\nimport * as Icon from \"react-bootstrap-icons\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [cardsData, cCardsData] = useState([]);\n  const [weather, cWeather] = useState({\n    date: \"\",\n    description: \"\",\n    temp_min: \"\",\n    temp_max: \"\",\n    wind_speed: \"\",\n  });\n\n  const fetchData = () => {\n    axios\n      .get(\n        \"https://api.openweathermap.org/data/2.5/onecall?lat=51.5074&lon=0.1278&units=metric&appid=e323e39c7383106d01601eadcafdf8cc\"\n      )\n      .then((res) => {\n        cCardsData(res.data.daily);\n      });\n  };\n\n  useEffect(() => {\n    cWeather({\n      date: \"13/08/21\",\n      description: \"Sunny intervals and a moderate breeze\",\n      temp_min: \"12\",\n      temp_max: \"19\",\n      wind_speed: \"16\",\n    });\n    fetchData();\n  }, []);\n\n  return (\n    <>\n      <Navbar bg=\"warning\" variant=\"dark\">\n        <Navbar.Brand>\n          Weather <Icon.CloudHaze2Fill size={50} />\n        </Navbar.Brand>\n      </Navbar>\n      {cardsData.map((i) => {\n        return <WeatherCards card={i} />;\n      })}\n      {/* <WeatherCards cards={weather} /> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}